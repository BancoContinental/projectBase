trigger:
  - main

pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: 'Release'
  registryNamespace: 'continentaldsv'
  imageVersion: '0.1.0'
  imageName: '$(Build.DefinitionName)'
  publishDirectory: './out'
  projectFile: 'src/WebApi/WebApi.csproj'
  sonarProjectKey: '$(Build.DefinitionName)'

stages:
  - stage: Build
    displayName: Build image
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: DotNetCoreCLI@2
            displayName: dotnet-restore
            inputs:
              command: 'restore'

          - task: SonarQubePrepare@4
            inputs:
              SonarQube: 'SonarQube'
              scannerMode: 'MSBuild'
              projectKey: '$(sonarProjectKey)'

          - task: DotNetCoreCLI@2
            displayName: dotnet-build
            inputs:
              command: 'publish'
              publishWebProjects: false
              projects: '$(projectFile)'
              arguments: '-c $(buildConfiguration) -o $(publishDirectory)'
              zipAfterPublish: false
              modifyOutputPath: false

          - task: DotNetCoreCLI@2
            displayName: 'dotnet-test'
            inputs:
              command: 'test'
              projects: '**/*[Tt]ests/*.csproj'
              arguments: '-c $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=opencover --logger trx'

          - task: SonarQubeAnalyze@4
              displayName: 'sonar-analyze'

          - task: SonarQubePublish@4
            displayName: 'sonar-publish'
            inputs:
              pollingTimeoutSec: '300'

          - task: Docker@2
            displayName: docker-build
            inputs:
              containerRegistry: 'docker01.bancontinental.com.py'
              repository: '$(registryNamespace)/$(imageName)'
              tags: '$(imageVersion)'
              arguments: ' --build-arg artifact_path=$(publishDirectory)'
              command: 'build'
              Dockerfile: '**/Dockerfile'

          - task: Docker@2
            displayName: docker-push
            inputs:
              containerRegistry: 'docker01.bancontinental.com.py'
              repository: '$(registryNamespace)/$(imageName)'
              command: 'push'
              tags: '$(imageVersion)'

          - task: CopyFiles@2
            displayName: manifiestos
            inputs:
              SourceFolder: './deploy/'
              Contents: '**'
              TargetFolder: '$(Build.ArtifactStagingDirectory)'

          - task: PublishBuildArtifacts@1
            name: publicar
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'
